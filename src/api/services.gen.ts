// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from '@hey-api/client-fetch';
import type {
  ReadCardCardsCardIdGetData,
  ReadCardCardsCardIdGetError,
  ReadCardCardsCardIdGetResponse,
  DeleteCardCardsCardIdDeleteData,
  DeleteCardCardsCardIdDeleteError,
  DeleteCardCardsCardIdDeleteResponse,
  UpdateCardCardsCardIdPutError,
  UpdateCardCardsCardIdPutResponse,
  ReadCardsCardsGetData,
  ReadCardsCardsGetError,
  ReadCardsCardsGetResponse,
  CreateCardCardsPostData,
  CreateCardCardsPostError,
  CreateCardCardsPostResponse,
  ReadCardCollectionsCardsCardIdCollectionsGetError,
  ReadCardCollectionsCardsCardIdCollectionsGetResponse,
  ReadCollectionCollectionsCollectionIdGetData,
  ReadCollectionCollectionsCollectionIdGetError,
  ReadCollectionCollectionsCollectionIdGetResponse,
  ReadCollectionsCollectionsGetData,
  ReadCollectionsCollectionsGetError,
  ReadCollectionsCollectionsGetResponse,
  CreateCollectionCollectionsPostData,
  CreateCollectionCollectionsPostError,
  CreateCollectionCollectionsPostResponse,
  ReadCollectionCardsCollectionsCollectionIdCardsGetData,
  ReadCollectionCardsCollectionsCollectionIdCardsGetError,
  ReadCollectionCardsCollectionsCollectionIdCardsGetResponse,
  SetCardCollectionConnectionCollectionsCollectionIdPairPostData,
  SetCardCollectionConnectionCollectionsCollectionIdPairPostError,
  SetCardCollectionConnectionCollectionsCollectionIdPairPostResponse,
  DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteData,
  DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteError,
  DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteResponse,
  CreateTrainRecordTrainRecordsCardIdPostData,
  CreateTrainRecordTrainRecordsCardIdPostError,
  CreateTrainRecordTrainRecordsCardIdPostResponse,
  ReadCardLastTrainRecordTrainRecordsRecordCardIdGetData,
  ReadCardLastTrainRecordTrainRecordsRecordCardIdGetError,
  ReadCardLastTrainRecordTrainRecordsRecordCardIdGetResponse,
  ReadUserUsersProfileGetError,
  ReadUserUsersProfileGetResponse,
  CreateUserUsersRegisterPostData,
  CreateUserUsersRegisterPostError,
  CreateUserUsersRegisterPostResponse,
  UpdateUserUsersEditProfilePutData,
  UpdateUserUsersEditProfilePutError,
  UpdateUserUsersEditProfilePutResponse,
  AuthenticateUserUsersLoginPostData,
  AuthenticateUserUsersLoginPostError,
  AuthenticateUserUsersLoginPostResponse,
  LogoutUserUsersLogoutPostError,
  LogoutUserUsersLogoutPostResponse,
  DeleteUserUsersDeleteProfileDeleteError,
  DeleteUserUsersDeleteProfileDeleteResponse,
  ReadCardsAdminCardsGetData,
  ReadCardsAdminCardsGetError,
  ReadCardsAdminCardsGetResponse,
  ReadTrainRecordsAdminTrainRecordsGetData,
  ReadTrainRecordsAdminTrainRecordsGetError,
  ReadTrainRecordsAdminTrainRecordsGetResponse,
  ReadUsersAdminUsersGetData,
  ReadUsersAdminUsersGetError,
  ReadUsersAdminUsersGetResponse,
  ReadCollectionsAdminCollectionsGetData,
  ReadCollectionsAdminCollectionsGetError,
  ReadCollectionsAdminCollectionsGetResponse,
} from './types.gen';

export const client = createClient(createConfig());

/**
 * Read Card
 */
export const readCardCardsCardIdGet = <ThrowOnError extends boolean = false>(
  options: Options<ReadCardCardsCardIdGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCardCardsCardIdGetResponse,
    ReadCardCardsCardIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/{card_id}',
  });
};

/**
 * Delete Card
 */
export const deleteCardCardsCardIdDelete = <
  ThrowOnError extends boolean = false
>(
  options: Options<DeleteCardCardsCardIdDeleteData, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteCardCardsCardIdDeleteResponse,
    DeleteCardCardsCardIdDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/{card_id}',
  });
};

/**
 * Update Card
 */
export const updateCardCardsCardIdPut = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateCardCardsCardIdPutResponse,
    UpdateCardCardsCardIdPutError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/{card_id}',
  });
};

/**
 * Read Cards
 */
export const readCardsCardsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadCardsCardsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCardsCardsGetResponse,
    ReadCardsCardsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/',
  });
};

/**
 * Create Card
 */
export const createCardCardsPost = <ThrowOnError extends boolean = false>(
  options: Options<CreateCardCardsPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateCardCardsPostResponse,
    CreateCardCardsPostError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/',
  });
};

/**
 * Read Card Collections
 */
export const readCardCollectionsCardsCardIdCollectionsGet = <
  ThrowOnError extends boolean = false
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCardCollectionsCardsCardIdCollectionsGetResponse,
    ReadCardCollectionsCardsCardIdCollectionsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/cards/{card_id}/collections',
  });
};

/**
 * Read Collection
 */
export const readCollectionCollectionsCollectionIdGet = <
  ThrowOnError extends boolean = false
>(
  options: Options<ReadCollectionCollectionsCollectionIdGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCollectionCollectionsCollectionIdGetResponse,
    ReadCollectionCollectionsCollectionIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/collections/{collection_id}',
  });
};

/**
 * Read Collections
 */
export const readCollectionsCollectionsGet = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ReadCollectionsCollectionsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCollectionsCollectionsGetResponse,
    ReadCollectionsCollectionsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/collections/',
  });
};

/**
 * Create Collection
 */
export const createCollectionCollectionsPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateCollectionCollectionsPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateCollectionCollectionsPostResponse,
    CreateCollectionCollectionsPostError,
    ThrowOnError
  >({
    ...options,
    url: '/collections/',
  });
};

/**
 * Read Collection Cards
 */
export const readCollectionCardsCollectionsCollectionIdCardsGet = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    ReadCollectionCardsCollectionsCollectionIdCardsGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    ReadCollectionCardsCollectionsCollectionIdCardsGetResponse,
    ReadCollectionCardsCollectionsCollectionIdCardsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/collections/{collection_id}/cards',
  });
};

/**
 * Set Card Collection Connection
 */
export const setCardCollectionConnectionCollectionsCollectionIdPairPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    SetCardCollectionConnectionCollectionsCollectionIdPairPostData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).post<
    SetCardCollectionConnectionCollectionsCollectionIdPairPostResponse,
    SetCardCollectionConnectionCollectionsCollectionIdPairPostError,
    ThrowOnError
  >({
    ...options,
    url: '/collections/{collection_id}/pair',
  });
};

/**
 * Delete Card Collection Connection
 */
export const deleteCardCollectionConnectionCollectionsCollectionIdUnpairDelete =
  <ThrowOnError extends boolean = false>(
    options: Options<
      DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteData,
      ThrowOnError
    >
  ) => {
    return (options?.client ?? client).delete<
      DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteResponse,
      DeleteCardCollectionConnectionCollectionsCollectionIdUnpairDeleteError,
      ThrowOnError
    >({
      ...options,
      url: '/collections/{collection_id}/unpair',
    });
  };

/**
 * Create Train Record
 */
export const createTrainRecordTrainRecordsCardIdPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateTrainRecordTrainRecordsCardIdPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateTrainRecordTrainRecordsCardIdPostResponse,
    CreateTrainRecordTrainRecordsCardIdPostError,
    ThrowOnError
  >({
    ...options,
    url: '/train_records/{card_id}',
  });
};

/**
 * Read Card Last Train Record
 */
export const readCardLastTrainRecordTrainRecordsRecordCardIdGet = <
  ThrowOnError extends boolean = false
>(
  options: Options<
    ReadCardLastTrainRecordTrainRecordsRecordCardIdGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? client).get<
    ReadCardLastTrainRecordTrainRecordsRecordCardIdGetResponse,
    ReadCardLastTrainRecordTrainRecordsRecordCardIdGetError,
    ThrowOnError
  >({
    ...options,
    url: '/train_records/record/{card_id}',
  });
};

/**
 * Read User
 */
export const readUserUsersProfileGet = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadUserUsersProfileGetResponse,
    ReadUserUsersProfileGetError,
    ThrowOnError
  >({
    ...options,
    url: '/users/profile',
  });
};

/**
 * Create User
 */
export const createUserUsersRegisterPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<CreateUserUsersRegisterPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    CreateUserUsersRegisterPostResponse,
    CreateUserUsersRegisterPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/register',
  });
};

/**
 * Update User
 */
export const updateUserUsersEditProfilePut = <
  ThrowOnError extends boolean = false
>(
  options: Options<UpdateUserUsersEditProfilePutData, ThrowOnError>
) => {
  return (options?.client ?? client).put<
    UpdateUserUsersEditProfilePutResponse,
    UpdateUserUsersEditProfilePutError,
    ThrowOnError
  >({
    ...options,
    url: '/users/edit_profile',
  });
};

/**
 * Authenticate User
 */
export const authenticateUserUsersLoginPost = <
  ThrowOnError extends boolean = false
>(
  options: Options<AuthenticateUserUsersLoginPostData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    AuthenticateUserUsersLoginPostResponse,
    AuthenticateUserUsersLoginPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/login',
  });
};

/**
 * Logout User
 */
export const logoutUserUsersLogoutPost = <ThrowOnError extends boolean = false>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    LogoutUserUsersLogoutPostResponse,
    LogoutUserUsersLogoutPostError,
    ThrowOnError
  >({
    ...options,
    url: '/users/logout',
  });
};

/**
 * Delete User
 */
export const deleteUserUsersDeleteProfileDelete = <
  ThrowOnError extends boolean = false
>(
  options?: Options<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).delete<
    DeleteUserUsersDeleteProfileDeleteResponse,
    DeleteUserUsersDeleteProfileDeleteError,
    ThrowOnError
  >({
    ...options,
    url: '/users/delete_profile',
  });
};

/**
 * Read Cards
 */
export const readCardsAdminCardsGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadCardsAdminCardsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCardsAdminCardsGetResponse,
    ReadCardsAdminCardsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/admin/cards',
  });
};

/**
 * Read Train Records
 */
export const readTrainRecordsAdminTrainRecordsGet = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ReadTrainRecordsAdminTrainRecordsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadTrainRecordsAdminTrainRecordsGetResponse,
    ReadTrainRecordsAdminTrainRecordsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/admin/train_records',
  });
};

/**
 * Read Users
 */
export const readUsersAdminUsersGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUsersAdminUsersGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadUsersAdminUsersGetResponse,
    ReadUsersAdminUsersGetError,
    ThrowOnError
  >({
    ...options,
    url: '/admin/users',
  });
};

/**
 * Read Collections
 */
export const readCollectionsAdminCollectionsGet = <
  ThrowOnError extends boolean = false
>(
  options?: Options<ReadCollectionsAdminCollectionsGetData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    ReadCollectionsAdminCollectionsGetResponse,
    ReadCollectionsAdminCollectionsGetError,
    ThrowOnError
  >({
    ...options,
    url: '/admin/collections',
  });
};
