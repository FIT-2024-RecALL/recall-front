// This file is auto-generated by @hey-api/openapi-ts

export const Body_add_file_storage__postSchema = {
  properties: {
    file: {
      type: 'string',
      format: 'binary',
      title: 'File',
    },
  },
  type: 'object',
  required: ['file'],
  title: 'Body_add_file_storage__post',
} as const;

export const Body_create_card_cards__postSchema = {
  properties: {
    card: {
      $ref: '#/components/schemas/CardCreate',
    },
    collections: {
      items: {
        type: 'integer',
      },
      type: 'array',
      maxItems: 100,
      minItems: 1,
      title: 'Collections',
    },
  },
  type: 'object',
  required: ['card', 'collections'],
  title: 'Body_create_card_cards__post',
} as const;

export const Body_update_card_cards__card_id__putSchema = {
  properties: {
    new_card: {
      $ref: '#/components/schemas/CardCreate',
    },
    collections: {
      items: {
        type: 'integer',
      },
      type: 'array',
      maxItems: 100,
      minItems: 1,
      title: 'Collections',
    },
  },
  type: 'object',
  required: ['new_card', 'collections'],
  title: 'Body_update_card_cards__card_id__put',
} as const;

export const CardSchema = {
  properties: {
    frontSide: {
      type: 'string',
      minLength: 1,
      title: 'Frontside',
    },
    backSide: {
      type: 'string',
      minLength: 1,
      title: 'Backside',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    ownerId: {
      type: 'integer',
      title: 'Ownerid',
    },
  },
  type: 'object',
  required: ['frontSide', 'backSide', 'id', 'ownerId'],
  title: 'Card',
} as const;

export const CardCreateSchema = {
  properties: {
    frontSide: {
      type: 'string',
      minLength: 1,
      title: 'Frontside',
    },
    backSide: {
      type: 'string',
      minLength: 1,
      title: 'Backside',
    },
  },
  type: 'object',
  required: ['frontSide', 'backSide'],
  title: 'CardCreate',
} as const;

export const CollectionSchema = {
  properties: {
    title: {
      type: 'string',
      maxLength: 100,
      minLength: 1,
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    ownerId: {
      type: 'integer',
      title: 'Ownerid',
    },
  },
  type: 'object',
  required: ['title', 'id', 'ownerId'],
  title: 'Collection',
} as const;

export const CollectionCreateSchema = {
  properties: {
    title: {
      type: 'string',
      maxLength: 100,
      minLength: 1,
      title: 'Title',
    },
    description: {
      anyOf: [
        {
          type: 'string',
        },
        {
          type: 'null',
        },
      ],
      title: 'Description',
    },
  },
  type: 'object',
  required: ['title'],
  title: 'CollectionCreate',
} as const;

export const FileUploadedSchemeSchema = {
  properties: {
    url: {
      type: 'string',
      title: 'Url',
    },
  },
  type: 'object',
  required: ['url'],
  title: 'FileUploadedScheme',
} as const;

export const HTTPValidationErrorSchema = {
  properties: {
    detail: {
      items: {
        $ref: '#/components/schemas/ValidationError',
      },
      type: 'array',
      title: 'Detail',
    },
  },
  type: 'object',
  title: 'HTTPValidationError',
} as const;

export const TrainRecordSchema = {
  properties: {
    metaData: {
      type: 'string',
      title: 'Metadata',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
    cardId: {
      type: 'integer',
      title: 'Cardid',
    },
    userId: {
      type: 'integer',
      title: 'Userid',
    },
  },
  type: 'object',
  required: ['metaData', 'id', 'cardId', 'userId'],
  title: 'TrainRecord',
} as const;

export const TrainRecordCreateSchema = {
  properties: {
    metaData: {
      type: 'string',
      title: 'Metadata',
    },
  },
  type: 'object',
  required: ['metaData'],
  title: 'TrainRecordCreate',
} as const;

export const UserSchema = {
  properties: {
    nickname: {
      type: 'string',
      maxLength: 50,
      title: 'Nickname',
    },
    email: {
      type: 'string',
      format: 'email',
      title: 'Email',
    },
    id: {
      type: 'integer',
      title: 'Id',
    },
  },
  type: 'object',
  required: ['nickname', 'email', 'id'],
  title: 'User',
} as const;

export const UserAuthSchema = {
  properties: {
    email: {
      type: 'string',
      format: 'email',
      title: 'Email',
    },
    password: {
      type: 'string',
      maxLength: 64,
      minLength: 13,
      title: 'Password',
    },
  },
  type: 'object',
  required: ['email', 'password'],
  title: 'UserAuth',
} as const;

export const UserBaseSchema = {
  properties: {
    nickname: {
      type: 'string',
      maxLength: 50,
      title: 'Nickname',
    },
    email: {
      type: 'string',
      format: 'email',
      title: 'Email',
    },
  },
  type: 'object',
  required: ['nickname', 'email'],
  title: 'UserBase',
} as const;

export const UserCreateSchema = {
  properties: {
    nickname: {
      type: 'string',
      maxLength: 50,
      title: 'Nickname',
    },
    email: {
      type: 'string',
      format: 'email',
      title: 'Email',
    },
    password: {
      type: 'string',
      maxLength: 64,
      minLength: 13,
      title: 'Password',
    },
  },
  type: 'object',
  required: ['nickname', 'email', 'password'],
  title: 'UserCreate',
} as const;

export const ValidationErrorSchema = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: 'string',
          },
          {
            type: 'integer',
          },
        ],
      },
      type: 'array',
      title: 'Location',
    },
    msg: {
      type: 'string',
      title: 'Message',
    },
    type: {
      type: 'string',
      title: 'Error Type',
    },
  },
  type: 'object',
  required: ['loc', 'msg', 'type'],
  title: 'ValidationError',
} as const;
